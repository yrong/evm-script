{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","addressType","setAddressType","addressInput","setAddressInput","addressPrefix","setAddressPrefix","plmToEvm","useCallback","polkadotCryptoUtils","polkadotUtils","evmToPlm","resultAddress","useMemo","className","src","logo","alt","type","onChange","value","e","Number","parseInt","target","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAAe,MAA0B,iC,6DCuF1BA,MA9Ef,WAAgB,IAAD,EACyBC,mBAA0B,QADnD,mBACNC,EADM,KACOC,EADP,OAE2BF,mBAAiB,IAF5C,mBAENG,EAFM,KAEQC,EAFR,OAG6BJ,mBALxB,IAEL,mBAGNK,EAHM,KAGSC,EAHT,KAKPC,EAAWC,uBAAY,WAC3B,OACEL,GACgB,SAAhBF,GACAQ,IAAiCN,EAAcE,GAAe,GAEvDK,IACLD,IAAiCN,GAAc,IAG1C,YAER,CAACA,EAAcF,EAAaI,IAEzBM,EAAWH,uBAAY,WAC3B,OACEL,GACgB,SAAhBF,GACAQ,IAAsCN,GAE/BM,IAAiCN,EAAcE,GAE/C,YAER,CAACF,EAAcE,EAAeJ,IAE3BW,EAAgBC,mBAAQ,WAC5B,MAAoB,SAAhBZ,EAA+BU,IACvBJ,MACX,CAACI,EAAUJ,EAAUN,IAExB,OACE,qBAAKa,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,yDAA4BhB,KAC5B,wBAAOa,UAAU,SAAjB,UACE,uBACEI,KAAK,WACLC,SAAU,WACoBjB,EAAR,SAAhBD,EAAuC,OACvB,WAGxB,sBAAMa,UAAU,oBAElB,sDACA,uBACEI,KAAK,OACLE,MAAOf,EACPc,SAAU,SAACE,GAAD,OAAOf,EAAiBgB,OAAOC,SAASF,EAAEG,OAAOJ,WAE7D,8CACA,uBACEF,KAAK,OACLE,MAAOjB,EACPgB,SAAU,SAACE,GAAD,OAAOjB,EAAgBiB,EAAEG,OAAOJ,UAE5C,4BAAIjB,IACJ,4BAAIS,IACJ,mBACEE,UAAU,WACVW,KAAK,sBACLD,OAAO,SACPE,IAAI,sBAJN,+BC9DYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eeadfbb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useCallback, useState, useMemo } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./toggle-button.css\";\nimport * as polkadotCryptoUtils from \"@polkadot/util-crypto\";\nimport * as polkadotUtils from \"@polkadot/util\";\n\nconst SS58_PREFIX = 42;\n\nfunction App() {\n  const [addressType, setAddressType] = useState<\"H160\" | \"SS58\">(\"SS58\");\n  const [addressInput, setAddressInput] = useState<string>(\"\");\n  const [addressPrefix, setAddressPrefix] = useState(SS58_PREFIX);\n\n  const plmToEvm = useCallback(() => {\n    if (\n      addressInput &&\n      addressType === \"SS58\" &&\n      polkadotCryptoUtils.checkAddress(addressInput, addressPrefix)[0]\n    ) {\n      return polkadotUtils.u8aToHex(\n        polkadotCryptoUtils.addressToEvm(addressInput, true)\n      );\n    } else {\n      return \"invalid\";\n    }\n  }, [addressInput, addressType, addressPrefix]);\n\n  const evmToPlm = useCallback(() => {\n    if (\n      addressInput &&\n      addressType === \"H160\" &&\n      polkadotCryptoUtils.isEthereumAddress(addressInput)\n    ) {\n      return polkadotCryptoUtils.evmToAddress(addressInput, addressPrefix);\n    } else {\n      return \"invalid\";\n    }\n  }, [addressInput, addressPrefix, addressType]);\n\n  const resultAddress = useMemo(() => {\n    if (addressType === \"H160\") return evmToPlm();\n    else return plmToEvm();\n  }, [evmToPlm, plmToEvm, addressType]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Current address scheme: {addressType}</p>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            onChange={() => {\n              if (addressType === \"H160\") setAddressType(\"SS58\");\n              else setAddressType(\"H160\");\n            }}\n          />\n          <span className=\"slider round\"></span>\n        </label>\n        <p>Change address prefix</p>\n        <input\n          type=\"text\"\n          value={addressPrefix}\n          onChange={(e) => setAddressPrefix(Number.parseInt(e.target.value))}\n        ></input>\n        <p>Input address</p>\n        <input\n          type=\"text\"\n          value={addressInput}\n          onChange={(e) => setAddressInput(e.target.value)}\n        ></input>\n        <p>{addressInput}</p>\n        <p>{resultAddress}</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}